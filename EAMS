# Event Attendee Management System

# Features:
# 1. Create
# 2. Read
# 3. Update
# 4. Delete

import tkinter as tk
from tkinter import messagebox, simpledialog
from tkinter import ttk
from datetime import datetime
import pytz
import re

class AttendeeManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Event Attendee Management System")
        self.attendees = {}

        # Set blue theme
        self.root.configure(bg='#b3cde0')

        # Configure grid layout
        self.root.columnconfigure(0, weight=1)
        self.root.columnconfigure(1, weight=1)
        self.root.rowconfigure(4, weight=1)

        # Labels
        self.lbl_title = tk.Label(root, text="Event Attendee Management System", font=("Arial", 16), bg='#b3cde0')
        self.lbl_title.grid(row=0, column=0, columnspan=2, pady=10)

        self.lbl_name = tk.Label(root, text="Name:", bg='#b3cde0')
        self.lbl_name.grid(row=1, column=0, padx=5, pady=5, sticky=tk.E)
        self.ent_name = tk.Entry(root, width=40)
        self.ent_name.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

        self.lbl_email = tk.Label(root, text="Email:", bg='#b3cde0')
        self.lbl_email.grid(row=2, column=0, padx=5, pady=5, sticky=tk.E)
        self.ent_email = tk.Entry(root, width=40)
        self.ent_email.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)

        # Button Frame
        self.btn_frame = tk.Frame(root, bg='#b3cde0')
        self.btn_frame.grid(row=3, column=0, columnspan=2, pady=5)

        self.btn_add = tk.Button(self.btn_frame, text="Add Attendee", command=self.add_attendee, bg='#6497b1')
        self.btn_add.grid(row=0, column=0, padx=5, pady=5)

        self.btn_update = tk.Button(self.btn_frame, text="Update Attendee", command=self.update_attendee, bg='#6497b1')
        self.btn_update.grid(row=0, column=1, padx=5, pady=5)

        self.btn_delete = tk.Button(self.btn_frame, text="Delete Attendee", command=self.delete_attendee, bg='#6497b1')
        self.btn_delete.grid(row=0, column=2, padx=5, pady=5)

        # Treeview with scrollbar for formal display
        self.frame_list = tk.Frame(root, bg='#b3cde0')
        self.frame_list.grid(row=4, column=0, columnspan=2, pady=10, padx=5, sticky=tk.NSEW)

        self.tree = ttk.Treeview(self.frame_list, columns=("Number", "Name", "Email", "Date", "Time"), show="headings", height=10)
        self.tree.heading("Number", text="Number", anchor=tk.CENTER)
        self.tree.heading("Name", text="Name", anchor=tk.CENTER)
        self.tree.heading("Email", text="Email", anchor=tk.CENTER)
        self.tree.heading("Date", text="Date", anchor=tk.CENTER)
        self.tree.heading("Time", text="Time", anchor=tk.CENTER)

        self.tree.column("Number", width=50, anchor=tk.CENTER)
        self.tree.column("Name", width=150, anchor=tk.CENTER)
        self.tree.column("Email", width=200, anchor=tk.CENTER)
        self.tree.column("Date", width=100, anchor=tk.CENTER)
        self.tree.column("Time", width=100, anchor=tk.CENTER)

        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.scrollbar = tk.Scrollbar(self.frame_list, orient=tk.VERTICAL, command=self.tree.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscroll=self.scrollbar.set)

        self.lbl_count = tk.Label(root, text="Total Attendees: 0", font=("Arial", 14), bg='#b3cde0')
        self.lbl_count.grid(row=5, column=0, columnspan=2, pady=10)

    def add_attendee(self):
        name = self.ent_name.get()
        email = self.ent_email.get()
        if not self.validate_input(name, email):
            return

        if email in self.attendees:
            messagebox.showwarning("Duplicate Entry", "An attendee with this email already exists.")
            return

        if not messagebox.askyesno("Confirm Add", "Are you sure you want to add this attendee?"):
            return

        number = len(self.attendees) + 1
        utc_timestamp = datetime.now(pytz.utc)
        gmt8 = pytz.timezone('Asia/Shanghai')
        local_timestamp = utc_timestamp.astimezone(gmt8)
        date = local_timestamp.strftime("%Y-%m-%d")
        time = local_timestamp.strftime("%H:%M:%S %Z")
        self.attendees[email] = {'name': name, 'number': number, 'date': date, 'time': time}
        messagebox.showinfo("Success", "Attendee added successfully!")
        self.ent_name.delete(0, tk.END)
        self.ent_email.delete(0, tk.END)
        self.update_treeview()

    def update_treeview(self):
        for row in self.tree.get_children():
            self.tree.delete(row)
        sorted_attendees = sorted(self.attendees.items(), key=lambda item: item[1]['name'].lower())
        for email, details in sorted_attendees:
            self.tree.insert("", tk.END, values=(details['number'], details['name'], email, details['date'], details['time']))
        self.lbl_count.config(text=f"Total Attendees: {len(self.attendees)}")

    def update_attendee(self):
        email = simpledialog.askstring("Input", "Enter the email of the attendee to update:")
        if not email:
            return

        if email in self.attendees:
            new_name = simpledialog.askstring("Input", "Enter the new name:")
            if new_name and new_name.replace(" ", "").isalpha():
                self.attendees[email]['name'] = new_name
                messagebox.showinfo("Success", "Attendee updated successfully!")
                self.update_treeview()
            else:
                messagebox.showwarning("Input Error", "Name must contain only letters and spaces.")
        else:
            messagebox.showwarning("Not Found", "No attendee found with the given email.")

    def delete_attendee(self):
        email = simpledialog.askstring("Input", "Enter the email of the attendee to delete:")
        if not email:
            return

        if email in self.attendees:
            if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this attendee?"):
                del self.attendees[email]
                self.reassign_numbers()
                messagebox.showinfo("Success", "Attendee deleted successfully!")
                self.update_treeview()
        else:
            messagebox.showwarning("Not Found", "No attendee found with the given email.")

    def reassign_numbers(self):
        for i, (email, details) in enumerate(self.attendees.items(), start=1):
            details['number'] = i

    def validate_input(self, name, email):
        if not name or not email:
            messagebox.showwarning("Input Error", "Please enter both name and email.")
            return False
        if not name.replace(" ", "").isalpha():
            messagebox.showwarning("Input Error", "Name must contain only letters and spaces.")
            return False
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            messagebox.showwarning("Input Error", "Invalid email format.")
            return False
        return True

if __name__ == "__main__":
    root = tk.Tk()
    app = AttendeeManagementSystem(root)
    root.mainloop()
